use strict;
use warnings;

# Die message if there is more than or less than one argument.
my $dieMessage = "Error: Expecting 1 program argument, found " . @ARGV . " instead.\n";
$dieMessage .= "Usage: perl WebVulnerabilityScanner.pl html_file\n";

# Exit the script if the wrong number of arguments is passed.
die $dieMessage if (@ARGV != 1);

# This scalar represents the HTML file to scan.
my $htmlFile = $ARGV[0];

# Stores the entire contents of the file.
my $contents = "";

# Undefine the record separator to read the whole file.
local $/;

# Open the HTML file and read its contents.
open my $inFH, "<", $htmlFile or die "Unable to open file: $htmlFile\n";
$contents = <$inFH>;
close $inFH;

# Re-initialize the record separator to newline.
$/ = "\n";

print "Starting Web Vulnerability Scan...\n";

# -----------------------------------
# 1. Check for Missing Security Headers
# -----------------------------------
print "\nChecking for security headers...\n";

my $missing_headers = 0;

if ($contents !~ m#Content-Security-Policy#) {
    print "Warning: Missing Content-Security-Policy header!\n";
    $missing_headers++;
}
if ($contents !~ m#X-Frame-Options#) {
    print "Warning: Missing X-Frame-Options header!\n";
    $missing_headers++;
}
if ($contents !~ m#X-Content-Type-Options#) {
    print "Warning: Missing X-Content-Type-Options header!\n";
    $missing_headers++;
}
if ($contents !~ m#Strict-Transport-Security#) {
    print "Warning: Missing Strict-Transport-Security header!\n";
    $missing_headers++;
}

print "Security header check complete. Missing headers: $missing_headers\n";

# -----------------------------------
# 2. Check for Cross-Site Scripting (XSS) Vulnerabilities
# -----------------------------------
print "\nChecking for potential XSS vulnerabilities...\n";

my $xss_count = 0;

# Detect inline script tags that may contain XSS payloads.
if ($contents =~ m#<script>#) {
    print "Warning: Potential XSS vulnerability detected in inline <script> tag!\n";
    $xss_count++;
}

# Check for unencoded user input (e.g., unsanitized output).
if ($contents =~ m#<input.*type="text".*value=.*?>#) {
    print "Warning: Potential XSS via unencoded user input detected in <input> tag!\n";
    $xss_count++;
}

print "XSS check complete. Potential XSS vulnerabilities: $xss_count\n";

# -----------------------------------
# 3. Check for Open Redirects
# -----------------------------------
print "\nChecking for open redirects...\n";

my $redirect_count = 0;

# Look for unvalidated redirects in URLs.
if ($contents =~ m#<a\s+href="http://example\.com/redirect\?url=.*"#) {
    print "Warning: Potential open redirect detected in <a> tag!\n";
    $redirect_count++;
}

print "Open redirect check complete. Open redirects found: $redirect_count\n";

# -----------------------------------
# 4. Check for Insecure Form Submissions
# -----------------------------------
print "\nChecking for insecure form submissions...\n";

my $form_insecure_count = 0;

# Look for forms that submit data via HTTP instead of HTTPS.
if ($contents =~ m#<form\s+action="http://#) {
    print "Warning: Form submission via insecure HTTP detected!\n";
    $form_insecure_count++;
}

print "Insecure form submission check complete. Insecure forms found: $form_insecure_count\n";

# -----------------------------------
# 5. Check for SQL Injection Vulnerabilities
# -----------------------------------
print "\nChecking for potential SQL injection vulnerabilities...\n";

my $sql_injection_count = 0;

# Detect typical SQL injection patterns in URL parameters or form inputs.
if ($contents =~ m/\?.*['"=;]/) {
    print "Warning: Potential SQL injection pattern detected in URL parameters or form inputs!\n";
    $sql_injection_count++;
}

print "SQL injection check complete. Potential SQL injection vulnerabilities: $sql_injection_count\n";

# -----------------------------------
# Summary of Results
# -----------------------------------
print "\nWeb Vulnerability Scan Complete.\n";
print "---------------------------\n";
print "Summary of Vulnerabilities:\n";
print "---------------------------\n";
print "Missing Security Headers: $missing_headers\n";
print "Potential XSS Vulnerabilities: $xss_count\n";
print "Open Redirects: $redirect_count\n";
print "Insecure Form Submissions: $form_insecure_count\n";
print "Potential SQL Injection Patterns: $sql_injection_count\n";
print "---------------------------\n";

print "Program Done.\n";
